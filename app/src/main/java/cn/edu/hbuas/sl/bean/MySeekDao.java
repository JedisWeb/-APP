package cn.edu.hbuas.sl.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_SEEK".
*/
public class MySeekDao extends AbstractDao<MySeek, Long> {

    public static final String TABLENAME = "MY_SEEK";

    /**
     * Properties of entity MySeek.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, Long.class, "number", true, "_id");
        public final static Property Telphone = new Property(1, String.class, "telphone", false, "TELPHONE");
        public final static Property Goods = new Property(2, String.class, "goods", false, "GOODS");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property SeekTime = new Property(4, String.class, "seekTime", false, "SEEK_TIME");
        public final static Property SeekArea = new Property(5, String.class, "seekArea", false, "SEEK_AREA");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Contacts = new Property(7, String.class, "contacts", false, "CONTACTS");
        public final static Property ContactsTel = new Property(8, String.class, "contactsTel", false, "CONTACTS_TEL");
        public final static Property QuestionOne = new Property(9, String.class, "questionOne", false, "QUESTION_ONE");
        public final static Property AnswerOne = new Property(10, String.class, "answerOne", false, "ANSWER_ONE");
        public final static Property QuesionTwo = new Property(11, String.class, "quesionTwo", false, "QUESION_TWO");
        public final static Property AnswerTwo = new Property(12, String.class, "answerTwo", false, "ANSWER_TWO");
        public final static Property QuestionThree = new Property(13, String.class, "questionThree", false, "QUESTION_THREE");
        public final static Property AnswerThree = new Property(14, String.class, "answerThree", false, "ANSWER_THREE");
        public final static Property QuestionFour = new Property(15, String.class, "questionFour", false, "QUESTION_FOUR");
        public final static Property AnswerFour = new Property(16, String.class, "answerFour", false, "ANSWER_FOUR");
        public final static Property QuestionFive = new Property(17, String.class, "questionFive", false, "QUESTION_FIVE");
        public final static Property AnswerFive = new Property(18, String.class, "answerFive", false, "ANSWER_FIVE");
        public final static Property Pic1 = new Property(19, String.class, "pic1", false, "PIC1");
        public final static Property Pic2 = new Property(20, String.class, "pic2", false, "PIC2");
        public final static Property Pic3 = new Property(21, String.class, "pic3", false, "PIC3");
        public final static Property Pic4 = new Property(22, String.class, "pic4", false, "PIC4");
    }


    public MySeekDao(DaoConfig config) {
        super(config);
    }
    
    public MySeekDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_SEEK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: number
                "\"TELPHONE\" TEXT NOT NULL ," + // 1: telphone
                "\"GOODS\" TEXT NOT NULL ," + // 2: goods
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"SEEK_TIME\" TEXT NOT NULL ," + // 4: seekTime
                "\"SEEK_AREA\" TEXT NOT NULL ," + // 5: seekArea
                "\"ADDRESS\" TEXT NOT NULL ," + // 6: address
                "\"CONTACTS\" TEXT NOT NULL ," + // 7: contacts
                "\"CONTACTS_TEL\" TEXT NOT NULL ," + // 8: contactsTel
                "\"QUESTION_ONE\" TEXT," + // 9: questionOne
                "\"ANSWER_ONE\" TEXT," + // 10: answerOne
                "\"QUESION_TWO\" TEXT," + // 11: quesionTwo
                "\"ANSWER_TWO\" TEXT," + // 12: answerTwo
                "\"QUESTION_THREE\" TEXT," + // 13: questionThree
                "\"ANSWER_THREE\" TEXT," + // 14: answerThree
                "\"QUESTION_FOUR\" TEXT," + // 15: questionFour
                "\"ANSWER_FOUR\" TEXT," + // 16: answerFour
                "\"QUESTION_FIVE\" TEXT," + // 17: questionFive
                "\"ANSWER_FIVE\" TEXT," + // 18: answerFive
                "\"PIC1\" TEXT," + // 19: pic1
                "\"PIC2\" TEXT," + // 20: pic2
                "\"PIC3\" TEXT," + // 21: pic3
                "\"PIC4\" TEXT);"); // 22: pic4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_SEEK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MySeek entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindString(2, entity.getTelphone());
        stmt.bindString(3, entity.getGoods());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindString(5, entity.getSeekTime());
        stmt.bindString(6, entity.getSeekArea());
        stmt.bindString(7, entity.getAddress());
        stmt.bindString(8, entity.getContacts());
        stmt.bindString(9, entity.getContactsTel());
 
        String questionOne = entity.getQuestionOne();
        if (questionOne != null) {
            stmt.bindString(10, questionOne);
        }
 
        String answerOne = entity.getAnswerOne();
        if (answerOne != null) {
            stmt.bindString(11, answerOne);
        }
 
        String quesionTwo = entity.getQuesionTwo();
        if (quesionTwo != null) {
            stmt.bindString(12, quesionTwo);
        }
 
        String answerTwo = entity.getAnswerTwo();
        if (answerTwo != null) {
            stmt.bindString(13, answerTwo);
        }
 
        String questionThree = entity.getQuestionThree();
        if (questionThree != null) {
            stmt.bindString(14, questionThree);
        }
 
        String answerThree = entity.getAnswerThree();
        if (answerThree != null) {
            stmt.bindString(15, answerThree);
        }
 
        String questionFour = entity.getQuestionFour();
        if (questionFour != null) {
            stmt.bindString(16, questionFour);
        }
 
        String answerFour = entity.getAnswerFour();
        if (answerFour != null) {
            stmt.bindString(17, answerFour);
        }
 
        String questionFive = entity.getQuestionFive();
        if (questionFive != null) {
            stmt.bindString(18, questionFive);
        }
 
        String answerFive = entity.getAnswerFive();
        if (answerFive != null) {
            stmt.bindString(19, answerFive);
        }
 
        String pic1 = entity.getPic1();
        if (pic1 != null) {
            stmt.bindString(20, pic1);
        }
 
        String pic2 = entity.getPic2();
        if (pic2 != null) {
            stmt.bindString(21, pic2);
        }
 
        String pic3 = entity.getPic3();
        if (pic3 != null) {
            stmt.bindString(22, pic3);
        }
 
        String pic4 = entity.getPic4();
        if (pic4 != null) {
            stmt.bindString(23, pic4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MySeek entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindString(2, entity.getTelphone());
        stmt.bindString(3, entity.getGoods());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindString(5, entity.getSeekTime());
        stmt.bindString(6, entity.getSeekArea());
        stmt.bindString(7, entity.getAddress());
        stmt.bindString(8, entity.getContacts());
        stmt.bindString(9, entity.getContactsTel());
 
        String questionOne = entity.getQuestionOne();
        if (questionOne != null) {
            stmt.bindString(10, questionOne);
        }
 
        String answerOne = entity.getAnswerOne();
        if (answerOne != null) {
            stmt.bindString(11, answerOne);
        }
 
        String quesionTwo = entity.getQuesionTwo();
        if (quesionTwo != null) {
            stmt.bindString(12, quesionTwo);
        }
 
        String answerTwo = entity.getAnswerTwo();
        if (answerTwo != null) {
            stmt.bindString(13, answerTwo);
        }
 
        String questionThree = entity.getQuestionThree();
        if (questionThree != null) {
            stmt.bindString(14, questionThree);
        }
 
        String answerThree = entity.getAnswerThree();
        if (answerThree != null) {
            stmt.bindString(15, answerThree);
        }
 
        String questionFour = entity.getQuestionFour();
        if (questionFour != null) {
            stmt.bindString(16, questionFour);
        }
 
        String answerFour = entity.getAnswerFour();
        if (answerFour != null) {
            stmt.bindString(17, answerFour);
        }
 
        String questionFive = entity.getQuestionFive();
        if (questionFive != null) {
            stmt.bindString(18, questionFive);
        }
 
        String answerFive = entity.getAnswerFive();
        if (answerFive != null) {
            stmt.bindString(19, answerFive);
        }
 
        String pic1 = entity.getPic1();
        if (pic1 != null) {
            stmt.bindString(20, pic1);
        }
 
        String pic2 = entity.getPic2();
        if (pic2 != null) {
            stmt.bindString(21, pic2);
        }
 
        String pic3 = entity.getPic3();
        if (pic3 != null) {
            stmt.bindString(22, pic3);
        }
 
        String pic4 = entity.getPic4();
        if (pic4 != null) {
            stmt.bindString(23, pic4);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MySeek readEntity(Cursor cursor, int offset) {
        MySeek entity = new MySeek( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // number
            cursor.getString(offset + 1), // telphone
            cursor.getString(offset + 2), // goods
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.getString(offset + 4), // seekTime
            cursor.getString(offset + 5), // seekArea
            cursor.getString(offset + 6), // address
            cursor.getString(offset + 7), // contacts
            cursor.getString(offset + 8), // contactsTel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // questionOne
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // answerOne
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // quesionTwo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // answerTwo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // questionThree
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // answerThree
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // questionFour
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // answerFour
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // questionFive
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // answerFive
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // pic1
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pic2
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // pic3
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // pic4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MySeek entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTelphone(cursor.getString(offset + 1));
        entity.setGoods(cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSeekTime(cursor.getString(offset + 4));
        entity.setSeekArea(cursor.getString(offset + 5));
        entity.setAddress(cursor.getString(offset + 6));
        entity.setContacts(cursor.getString(offset + 7));
        entity.setContactsTel(cursor.getString(offset + 8));
        entity.setQuestionOne(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAnswerOne(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuesionTwo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAnswerTwo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQuestionThree(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAnswerThree(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQuestionFour(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAnswerFour(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setQuestionFive(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAnswerFive(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPic1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPic2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPic3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPic4(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MySeek entity, long rowId) {
        entity.setNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MySeek entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MySeek entity) {
        return entity.getNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
